---
interface SocialLink {
  platform: string;
  url: string;
}

interface Props {
  links: SocialLink[];
}

const { links } = Astro.props;

// Define the specific platforms we support
type Platform = 'twitter' | 'instagram' | 'github' | 'linkedin' | 'youtube' | 'facebook' | 'tiktok' | 'discord';

const platformIcons: Record<Platform, string> = {
  twitter: "fa-twitter",
  instagram: "fa-instagram",
  github: "fa-github",
  linkedin: "fa-linkedin-in",
  youtube: "fa-youtube",
  facebook: "fa-facebook-f",
  tiktok: "fa-tiktok",
  discord: "fa-discord",
};

// Helper function to safely get icon, fallback to link icon if platform not found
const getIconClass = (platform: string): string => {
  return platform in platformIcons 
    ? platformIcons[platform as Platform] 
    : "fa-link";
};
---

<div class="social-links">
  {
    links.map((link) => (
      <a href={link.url} target="_blank" rel="noopener noreferrer" class="social-icon" aria-label={`Visit ${link.platform}`}>
        <i class={`fab ${getIconClass(link.platform)}`}></i>
      </a>
    ))
  }
</div>

<style>
  .social-links {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .social-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--cardBackground);
    color: var(--primaryColor);
    box-shadow: 0 2px 10px var(--shadowColor);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .social-icon:hover {
    transform: translateY(-3px);
    box-shadow: 0 4px 12px var(--shadowColor);
    color: var(--hoverColor);
  }

  .social-icon i {
    font-size: 1.25rem;
  }
</style> 